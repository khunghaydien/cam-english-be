// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Level {
  FOUNDATION
  INTERMEDIATE
  ADVANCED
}

enum SpeakingRoomType {
  ONLY_ME
  SOLO_LEARN
  ALL_ARE_WELCOME
}

enum Role {
  MEMBER
  ADMIN
}

enum Language {
  ENGLISH
  VIETNAMESE
  CHINESE
  SPANISH
  FRENCH
  GERMAN
  JAPANESE
  KOREAN
  RUSSIAN
  ITALIAN
  PORTUGUESE
  ARABIC
  THAI
  MALAY
  HINDI
  BENGALI
  URDU
  PERSIAN
  TURKISH
  POLISH
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  image     String
  password  String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  speakingRooms     SpeakingRoom[] // Host relationship
  userSpeakingRooms UserSpeakingRoom[] // Participant relationship
  Expense           Expense[]

  @@index([name])
}

model UserSpeakingRoom {
  id             String       @id @default(uuid())
  participantId  String
  participant    User         @relation(fields: [participantId], references: [id], onDelete: Cascade)
  speakingRoomId String
  speakingRoom   SpeakingRoom @relation(fields: [speakingRoomId], references: [id], onDelete: Cascade)

  @@unique([participantId, speakingRoomId]) // Ensure unique user-room pair
}

model SpeakingRoom {
  id        String           @id @default(uuid())
  name      String           @unique
  level     Level
  type      SpeakingRoomType
  language  Language
  hostId    String
  host      User             @relation(fields: [hostId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  // Relations
  userSpeakingRooms UserSpeakingRoom[]

  @@index([name])
}

model Expense {
  id          String   @id @default(uuid())
  date        String
  description String
  amount      Int
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([description])
}
